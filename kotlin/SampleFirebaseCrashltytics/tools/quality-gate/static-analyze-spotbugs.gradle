sourceSets {
    main {
        java.srcDirs = ['src/main/java']
    }
}

spotbugs {

    //sourceDirs = sourceSets.main.allSource.srcDirs
    //classDirs = sourceSets.main.output
    //auxClassPaths = sourceSets.main.compileClasspath

    ignoreFailures = false
    showStackTraces = true
    showProgress = false
    reportLevel = 'high'
    effort = 'max'
    //visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
    //omitVisitors = [ 'FindNonShortCircuit' ]
    reportsDir = file("$buildDir/reports/spotbugs")
    //includeFilter = file('spotbugs-include.xml')
    //excludeFilter = file('spotbugs-exclude.xml')
    //baselineFile = file('spotbugs-baseline.xml')
    //onlyAnalyze = ['com.foobar.MyClass', 'com.foobar.mypkg.*']
    projectName = name
    //release = version
    extraArgs = [ '-nested:false' ]
    jvmArgs = [ '-Duser.language=ja' ]
    maxHeapSize = '512m'
}

tasks.withType(SpotBugsTask) {
    dependsOn 'assemble'
    classes = files("$project.buildDir/intermediates/javac")
    //classes = files("$projectDir.absolutePath/build/intermediates/classes/debug")
    //source = fileTree('src/main/java')
    group 'verification'
    debug 'statical code analyse with SpotBugs'
    reports {
        html.enabled = true
        xml.enabled = false
        html.destination file("$project.buildDir/outputs/findbugs/findbugs-output.html")
    }
}


// estudando essa parte
project.plugins.whenPluginAdded {
    newPlugin ->
        switch (newPlugin.class.name) {
            case 'com.android.build.gradle.Library':
            case 'com.android.build.gradle.AppPlhgin':
                createBuildTypeVariants {
                    buildType ->
                        def buildTypeCap = buildType.capitalize()
                        project.rootProject.tasks
                                .findByName("spotbugs$buildTypeCap")
                                .dependsOn(":${project.path}:spotbugs$buildTypeCap")
                }

                break
        }
}
